{
  "version": 3,
  "file": "jsenv_publish_node_package.cjs",
  "sources": [
    "../../src/internal/readProjectPackage.js",
    "../../src/internal/getGithubRelease.js",
    "../../src/internal/createGithubRelease.js",
    "../../src/ensureGithubReleaseForPackage.js"
  ],
  "sourcesContent": [
    "import { resolveUrl, urlToFileSystemPath, readFile } from \"@jsenv/util\"\n\nexport const readProjectPackage = async ({ projectDirectoryUrl }) => {\n  const packageFileUrl = resolveUrl(\"./package.json\", projectDirectoryUrl)\n\n  let packageInProject\n  try {\n    const packageString = await readFile(packageFileUrl)\n    try {\n      packageInProject = JSON.parse(packageString)\n    } catch (e) {\n      if (e.name === \"SyntaxError\") {\n        throw new Error(`syntax error while parsing project package.json\n--- syntax error stack ---\n${e.stack}\n--- package.json path ---\n${urlToFileSystemPath(packageFileUrl)}`)\n      }\n      throw e\n    }\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      throw new Error(\n        `cannot find project package.json\n--- package.json path ---\n${urlToFileSystemPath(packageFileUrl)}`,\n      )\n    }\n    throw e\n  }\n\n  return packageInProject\n}\n",
    "// https://developer.github.com/v3/git/refs/#get-a-single-reference\n\nimport { fetchUrl } from \"@jsenv/server\"\n\nexport const getGithubRelease = async ({\n  githubToken,\n  githubRepositoryOwner,\n  githubRepositoryName,\n  githubReleaseName,\n}) => {\n  const requestUrl = `https://api.github.com/repos/${githubRepositoryOwner}/${githubRepositoryName}/git/ref/tags/${githubReleaseName}`\n  const response = await fetchUrl(requestUrl, {\n    headers: {\n      authorization: `token ${githubToken}`,\n    },\n    method: \"GET\",\n  })\n\n  const responseStatus = response.status\n\n  if (responseStatus === 404) {\n    return null\n  }\n\n  if (responseStatus !== 200) {\n    throw new Error(\n      writeUnexpectedResponseStatus({\n        requestUrl,\n        responseStatus,\n        responseText: await response.text(),\n      }),\n    )\n  }\n\n  const responseJson = await response.json()\n  return responseJson\n}\n\nconst writeUnexpectedResponseStatus = ({\n  requestUrl,\n  responseStatus,\n  responseText,\n}) => `github api response status should be 200.\n--- request url ----\n${requestUrl}\n--- response status ---\n${responseStatus}\n--- response text ---\n${responseText}`\n",
    "// https://developer.github.com/v3/git/tags/\n\nimport { fetchUrl } from \"@jsenv/server\"\n\nexport const createGithubRelease = async ({\n  githubToken,\n  githubRepositoryOwner,\n  githubRepositoryName,\n  githubSha,\n  githubReleaseName,\n}) => {\n  const requestUrl = `https://api.github.com/repos/${githubRepositoryOwner}/${githubRepositoryName}/git/refs`\n  const body = JSON.stringify({\n    ref: `refs/tags/${githubReleaseName}`,\n    sha: githubSha,\n  })\n  const response = await fetchUrl(requestUrl, {\n    headers: {\n      \"authorization\": `token ${githubToken}`,\n      \"content-length\": Buffer.byteLength(body),\n    },\n    method: \"POST\",\n    body,\n  })\n\n  const responseStatus = response.status\n\n  if (responseStatus !== 201) {\n    throw new Error(\n      writeUnexpectedResponseStatus({\n        requestUrl,\n        responseStatus,\n        responseText: await response.text(),\n      }),\n    )\n  }\n\n  const responseJson = await response.json()\n  return responseJson\n}\n\nconst writeUnexpectedResponseStatus = ({\n  requestUrl,\n  responseStatus,\n  responseText,\n}) => `github api response status should be 201.\n--- request url ----\n${requestUrl}\n--- response status ---\n${responseStatus}\n--- response text ---\n${responseText}`\n",
    "import { createLogger } from \"@jsenv/logger\"\nimport {\n  assertAndNormalizeDirectoryUrl,\n  catchCancellation,\n  createCancellationTokenForProcess,\n} from \"@jsenv/util\"\n\nimport { readProjectPackage } from \"./internal/readProjectPackage.js\"\nimport { getGithubRelease } from \"./internal/getGithubRelease.js\"\nimport { createGithubRelease } from \"./internal/createGithubRelease.js\"\n\nexport const ensureGithubReleaseForPackage = async ({\n  cancellationToken = createCancellationTokenForProcess(),\n  logLevel,\n  projectDirectoryUrl,\n  updateProcessExitCode = true,\n}) => {\n  return catchCancellation(async () => {\n    const logger = createLogger({ logLevel })\n    logger.debug(\n      `autoReleaseOnGithub(${JSON.stringify({ projectDirectoryUrl, logLevel }, null, \"  \")})`,\n    )\n\n    projectDirectoryUrl = assertAndNormalizeDirectoryUrl(projectDirectoryUrl)\n\n    const {\n      githubToken,\n      githubRepositoryOwner,\n      githubRepositoryName,\n      githubSha,\n    } = getOptionsFromGithubAction()\n\n    logger.debug(`reading project package.json`)\n    const { packageVersion } = await getOptionsFromProjectPackage({ projectDirectoryUrl })\n    cancellationToken.throwIfRequested()\n    logger.debug(`${packageVersion} found in package.json`)\n\n    logger.debug(`search release for ${packageVersion} on github`)\n    const githubReleaseName = `v${packageVersion}`\n    const existingRelease = await getGithubRelease({\n      githubToken,\n      githubRepositoryOwner,\n      githubRepositoryName,\n      githubReleaseName,\n    })\n    cancellationToken.throwIfRequested()\n    if (existingRelease) {\n      logger.info(\n        `${packageVersion} already released at ${generateReleaseUrl({\n          githubRepositoryOwner,\n          githubRepositoryName,\n          githubReleaseName,\n        })}`,\n      )\n      return\n    }\n\n    logger.info(`creating release for ${packageVersion}`)\n    await createGithubRelease({\n      githubToken,\n      githubRepositoryOwner,\n      githubRepositoryName,\n      githubSha,\n      githubReleaseName,\n    })\n    logger.info(\n      `release created at ${generateReleaseUrl({\n        githubRepositoryOwner,\n        githubRepositoryName,\n        githubReleaseName,\n      })}`,\n    )\n  }).catch((e) => {\n    if (updateProcessExitCode) {\n      process.exitCode = 1\n    }\n    throw e\n  })\n}\n\nconst generateReleaseUrl = ({ githubRepositoryOwner, githubRepositoryName, githubReleaseName }) => {\n  return `https://github.com/${githubRepositoryOwner}/${githubRepositoryName}/releases/tag/${githubReleaseName}`\n}\n\nconst getOptionsFromGithubAction = () => {\n  const eventName = process.env.GITHUB_EVENT_NAME\n  if (!eventName) {\n    throw new Error(`missing process.env.GITHUB_EVENT_NAME, we are not in a github action`)\n  }\n  if (eventName !== \"push\") {\n    throw new Error(`getOptionsFromGithubAction must be called only in a push action`)\n  }\n\n  const githubRepository = process.env.GITHUB_REPOSITORY\n  if (!githubRepository) {\n    throw new Error(`missing process.env.GITHUB_REPOSITORY`)\n  }\n\n  const [githubRepositoryOwner, githubRepositoryName] = githubRepository.split(\"/\")\n\n  const githubToken = process.env.GITHUB_TOKEN\n  if (!githubToken) {\n    throw new Error(`missing process.env.GITHUB_TOKEN`)\n  }\n\n  const githubSha = process.env.GITHUB_SHA\n  if (!githubSha) {\n    throw new Error(`missing process.env.GITHUB_SHA`)\n  }\n\n  return {\n    githubRepositoryOwner,\n    githubRepositoryName,\n    githubToken,\n    githubSha,\n  }\n}\n\nconst getOptionsFromProjectPackage = async ({ projectDirectoryUrl }) => {\n  const projectPackage = await readProjectPackage({ projectDirectoryUrl })\n  return {\n    packageVersion: projectPackage.version,\n  }\n}\n"
  ],
  "names": [
    "readProjectPackage",
    "projectDirectoryUrl",
    "packageFileUrl",
    "resolveUrl",
    "packageInProject",
    "packageString",
    "readFile",
    "JSON",
    "parse",
    "e",
    "name",
    "Error",
    "stack",
    "urlToFileSystemPath",
    "code",
    "getGithubRelease",
    "githubToken",
    "githubRepositoryOwner",
    "githubRepositoryName",
    "githubReleaseName",
    "requestUrl",
    "response",
    "fetchUrl",
    "headers",
    "authorization",
    "method",
    "responseStatus",
    "status",
    "writeUnexpectedResponseStatus",
    "responseText",
    "text",
    "responseJson",
    "json",
    "createGithubRelease",
    "githubSha",
    "body",
    "stringify",
    "ref",
    "sha",
    "Buffer",
    "byteLength",
    "ensureGithubReleaseForPackage",
    "cancellationToken",
    "createCancellationTokenForProcess",
    "logLevel",
    "updateProcessExitCode",
    "catchCancellation",
    "logger",
    "createLogger",
    "debug",
    "assertAndNormalizeDirectoryUrl",
    "getOptionsFromGithubAction",
    "packageVersion",
    "getOptionsFromProjectPackage",
    "throwIfRequested",
    "existingRelease",
    "info",
    "generateReleaseUrl",
    "catch",
    "process",
    "exitCode",
    "eventName",
    "env",
    "GITHUB_EVENT_NAME",
    "githubRepository",
    "GITHUB_REPOSITORY",
    "split",
    "GITHUB_TOKEN",
    "GITHUB_SHA",
    "projectPackage",
    "version"
  ],
  "mappings": "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"
}